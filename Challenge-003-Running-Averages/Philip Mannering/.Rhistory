splitted[2]
splitted[2] <- as.integer(splitted[2])
splitted[[2]] <- as.integer(splitted[2])
splitted[2] <- as.integer(splitted[[2]])
splitted
# Change datatype
new <- transform(splitted, Poem=as.character(Poem))
str(new)
# Read in the files
df <- read.csv('../files/input.csv', as.is = T)
df
str(df)
# Read in the files
df <- read.csv('../files/input.csv')
op <- read.csv('../files/output.csv')
# Split field by a comma
splitted <- str_split_fixed(df$Field_1,',',3)
# Remove single and double quotes
splitted <- apply(splitted, 2, function(x) str_remove_all(x,'[\'"]'))
# Change matrix to dataframe
splitted <- as.data.frame(splitted)
names(splitted) = c('Poem','Poem_ID','Poem_Read_Date')
# Change datatype
new <- transform(splitted, Poem=as.character(Poem))
new
str(new)
# Change datatype
new <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(Poem_ID),
Poem_Read_Data = as.Date(Poem_Read_Data))
?as.Date
dtstring = new$Poem_Read_Date
dtstring
as.Date(dtstring)
as.Date(dtstring, '%d-%Mon-%y')
dtstring
as.Date(splitted$Poem_Read_Date, '%d-%Mon-%y')
as.Date(splitted$Poem_Read_Date, '%d-%b-%y')
# Change datatype
new <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(Poem_ID),
Poem_Read_Data = as.Date(Poem_Read_Data, '%d-%b-%y'))
# Change datatype
new <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(Poem_ID),
Poem_Read_Date = as.Date(Poem_Read_Date, '%d-%b-%y'))
new
# Change datatype
ans <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(Poem_ID),
Poem_Read_Date = as.Date(Poem_Read_Date, '%d-%b-%y'))
identical(ans,op)
ans
str(ans)
str(op)
op = read.csv('../files/output.csv', as.is=T)
op
str(op)
?read.csv
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('chr','int','date'))
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','int','date'))
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','numeric','date'))
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','numeric','Date'))
op
str(op)
str(splitted)
str(ans)
# Check the output
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','numeric','Date'))
identical(ans,op)
ans
op
ans==op
# Check the output
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','numeric','Date'))
op
ans
str(op)
str(ans)
splitted
as.numeric(splitted$Poem_ID)
as.integer(splitted$Poem_ID)
as.numeric(splitted$Poem_ID)
# Read in input
df <- read.csv('../files/input.csv', stringsAsFactors = FALSE)
identical(ans,op)
ans
op
# Read in input
df <- read.csv('../files/input.csv', stringsAsFactors = FALSE)
splitted
str(splitted)
# Read in input
df <- read.csv('../files/input.csv', stringsAsFactors = FALSE)
# Split field by a comma
splitted <- str_split_fixed(df$Field_1,',',3)
# Remove single and double quotes
splitted <- apply(splitted, 2, function(x) str_remove_all(x,'[\'"]'))
# Change matrix to dataframe
splitted <- as.data.frame(splitted)
names(splitted) = c('Poem','Poem_ID','Poem_Read_Date')
# Change datatype
ans <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(Poem_ID),
Poem_Read_Date = as.Date(Poem_Read_Date, '%d-%b-%y'))
ans
splitted
as.numeric(as.character(splitted$Poem_ID))
# Change datatype
ans <- transform(splitted,  Poem = as.character(Poem),
Poem_ID = as.numeric(as.character(Poem_ID)),
Poem_Read_Date = as.Date(Poem_Read_Date, '%d-%b-%y'))
# Check the output
op <- read.csv('../files/output.csv', as.is=T,
colClasses = c('character','numeric','Date'))
identical(ans,op)
df <- read.csv('../files/input.csv')
df
setwd('~/GitHub/ARP/Challenge-003-Running-Averages/Philip Mannering/')
df <- read.csv('../files/input.csv')
df
dim(df)
head(df)
df$date <- stringr::str_c(df$Year, df$Month, sep='-')
df
head(df)
library(stringr)
df <- read.csv('../files/input.csv')
df$date <- str_c(df$Year, df$Month, sep='-')
df
df
head(df)
df$date <- as.type(df$date,'Date')
df$date <- as.Date(df$date)
df$date <- as.Date(df$date,'%Y-%m')
df
df$date <- str_c(df$Year, df$Month, sep='-')
df$date <- as.Date(df$date,'%Y-%m')
head(df)
df$date <- as.Date(df$date,'%y-%m')
head(df)
df$date <- str_c(df$Year, df$Month, sep='-')
df$date <- as.Date(df$date,'%y-%m')
head(df)
df$date <- str_c(df$Year, df$Month, sep='-')
head(df)
df$date <- as.Date(df$date,'%Y-%m')
head(df)
?as.date
?as.Date
df$date <- str_c(df$Year, df$Month,'01' sep='-')
df$date <- str_c(df$Year, df$Month,'01', sep='-')
df$date <- as.Date(df$date,'%Y-%m-%d')
df
head(df)
library(data.table)
dt <- as.data.table(df)
dt
tail(df)
dt
indices(dt)
dt[,date := format.Date(date)]
dt
dt[,u.CAGI]
dt
??rolling
zoo::rollmean(df$u.IR,3)
df <- read.csv('../files/input.csv')
df$u.IR
df$date <- str_c(df$Year, df$Month, '01', sep='-')
df$date <- as.Date(df$date,'%Y-%m-%d')
head(df)
df$u.IR
library(zoo)
rollmean(df$u.IR,3)
u.ir <- df$u.IR
plot(u.ir)
summarize(u.ir)
summary(u.ir)
mean(u.ir, na.rm = T)
mean(u.ir, na.rm = F)
?zoo
rollapply(df,3,mean())
?rollapply
rollapply(df,3,mean
)
rollapply(df,3,function(x) mean(x, na.rm=T)
)
rollapply(u.ir,3,function(x) mean(x, na.rm=T)
)
rollapply(u.ir,3,function(x) mean)
rollapply(u.ir,3,mean)
rollapply(u.ir,3,mean)
op <- read.csv('../files/output.csv')
op
head(op)
op$u.IR
op$u.IR[:10]
op$u.IR[1:10]
rollapply(u.ir,3,mean)[1:10]
op$r3mo_u_IR[1:10]
rollapply(u.ir,3,mean,align='left')[1:10]
rollapply(u.ir,3,mean,align='right')[1:10]
rollapply(u.ir,3,mean,align='center')[1:10]
dim(op)
dim(u.ir)
length(u.ir)
u.ir <- df$u.IR
u.ir[1:10]
op$r3mo_u_IR[1:10]
rollapply(3,c(1,1,1),mean)[1:10]
rollapply(u.ir,c(1,1,1),mean)[1:10]
rollapply(u.ir,3,mean)[1:10]
(56+44+42)/3
(56+44)/2
(56+44+52)/3
rollapply(u.ir,-3,mean)[1:10]
rollapply(u.ir,3,mean,align='right')[1:10]
rollapply(u.ir,3,mean,align='left')[1:10]
rollapply(u.ir,3,mean,align='right')[1:10]
rollapply(u.ir,3,mean,align='right',partial=TRUE)[1:10]
length(rollapply(u.ir,3,mean,align='right')[1:10])
length(rollapply(u.ir,3,mean,align='right'))
length(rollapply(u.ir,3,mean,align='right')[1:10])
rollapply(u.ir,3,mean,align='right',partial=TRUE)[1:10]
rollapply(u.ir,3,mean,align='left',partial=TRUE)[1:10]
rollapply(u.ir,3,mean,align='right',partial=TRUE)[1:10]
op$r3mo_u_IR[1:10]
head(df)
df <- read.csv('../files/input.csv')
df
head(df)
df[[4:6]]
df[1:3]
df[4:6]
head(df)
df[1:3,1:2]
dim(df)
df[1:3,4:9]
sapply(df[4:9],function(x) rollapply(x,3,mean,partial=TRUE))
sapply(df[4:9],function(x) rollapply(x,3,mean(x,na.rm=T)),partial=TRUE))
sapply(df[4:9],function(x) rollapply(x,3,mean(x,na.rm=T),partial=TRUE))
rollapply(df,3,mean,partial=TRUE)
rollapply(df,3,mean,partial=TRUE,by.column=TRUE)
head(df)
rollapply(df[4:9],3,mean,partial=TRUE,by.column=TRUE)
rollapply(df[4:9],3,mean,align='right',partial=TRUE,by.column=TRUE)
op$u.IR==NA
is.na(op$u.IR)
sum(is.na(op$u.IR))
a = c('I','am','a','duck')
a + 'xxx'
a
str_c(a,'xxx')
names(op)
df_6mo <- rollmean(df[4:9],6,align = 'right', partial = TRUE)
head(df_6mo)
head(op)
df_3mo <- rollmean(df[4:9], 3, align = 'right', partial = TRUE, by.column=TRUE)
df_6mo <- rollmean(df[4:9], 6, align = 'right', partial = TRUE, by.column=TRUE)
head(op)[grep(names(op),'6']
head(op)[grep(names(op),'6')]
grep(names(op))
grep(names(op),'6')
grep('6',names(op))
dim(op)
str_detect(names(op),6)
str_detect(names(op),'6')
op[str_detect(names(op),'6')][1:6]
head(op[str_detect(names(op),'6'))
head(op[str_detect(names(op),'6')])
head(op[str_detect(names(op),'3')])
head(df_3mo)
df_3mo <- rollmean(df[4:9], 3, align = 'right', partial = TRUE, by.column=TRUE)
head(df_3mo)
df_3mo <- rollmean(df[4:9], 3, align = 'left', partial = TRUE, by.column=TRUE)
head(df_3mo)
df_3mo <- rollmean(df[4:9], 3, align = 'left', partial = FALSE, by.column=TRUE)
head(df_3mo)
df_3mo <- rollmean(df[4:9], 3, align = 'right', partial = FALSE, by.column=TRUE)
df_3mo
head(df_3mo)
?rollmean
df_3mo <- rollapply(df[4:9], 3, mean, align = 'right', partial = TRUE, by.column=TRUE)
df_6mo <- rollapply(df[4:9], 6, mean, align = 'right', partial = TRUE, by.column=TRUE)
df_3mo
head(df_3mo)
head(op[str_detect(names(op),'3')])
df_3mo <- rollapply(df[4:9], 3, mean, align = 'left', partial = TRUE, by.column=TRUE)
head(df_3mo)
df_3mo <- rollapply(df[4:9], 3, mean, align = 'center', partial = TRUE, by.column=TRUE)
head(df_3mo)
head(df)
head(op[str_detect(names(op),'3')])
df_3mo <- rollapply(df[4:9], 3, mean, align = 'right', partial = TRUE, by.column=TRUE)
head(df_3mo)
z <- zoo(c(NA, 2, NA, 1, 4, 5, 2, NA))
na.fill(z, "extend")
na.fill(z, c("extend", NA))
na.fill(z, c(NA,"extend"))
df_3mo <- rollapply(na.fill(df[4:9], 'extend'), 3, mean, align = 'right', partial = TRUE, by.column=TRUE,)
df_3mo <- rollapply(na.fill(df[4:9], 'extend'), 3, mean, align = 'right', partial = TRUE, by.column=TRUE)
head(df_3mo)
head(op[str_detect(names(op),'3')])
?rollapply
df_3mo <- rollapply(df[4:9], 3, mean, align = 'right', partial = TRUE, by.column=TRUE, fill = c('extend',NA))
head(df_3mo)
df_3mo <- rollapply(df[4:9], 3, mean, align = 'right', partial = TRUE, by.column=TRUE, fill = c('extend',NA,'extend'))
head(df_3mo)
df_3mo <- rollapply(df[4:9], 3, mean, align = 'right', partial = TRUE, by.column=TRUE, fill = c('extend'))
df_3mo
u.ir
rollmean(u.ir,3)[1:10]
rollapply(u.ir,3,mean,align='right')[1:10]
rollapply(u.ir,3,mean,align='right',partial=FALSE)[1:10]
rollapply(u.ir,3,mean,align='right',partial=FALSE,fill='extend')[1:10]
rollapply(u.ir,3,mean,align='left',partial=FALSE,fill='extend')[1:10]
rollapply(u.ir,3,mean,align='left',partial=TRUE,fill='extend')[1:10]
rollapply(u.ir,3,mean,align='right',partial=TRUE,fill='extend')[1:10]
rollapply(u.ir,3,mean,align='right',partial=TRUE,fill=c(56))[1:10]
rollapply(u.ir,3,mean,align='right',partial=TRUE,[1:10])
rollapply(u.ir,3,mean,align='right',partial=TRUE)[1:10]
rollapply(c(56,u.ir),3,mean,align='right',partial=TRUE)[1:10]
rollapply(c(56,u.ir),3,mean,align='right',partial=FALSE)[1:10]
rollapply(c(56,u.ir),3,mean,align='right',partial=TRUE)[1:10]
rollapply(c(56,u.ir),3,mean,align='center',partial=TRUE)[1:10]
rollapply(c(56,u.ir),3,mean,align='right',partial=TRUE)[1:10]
rollapply(c(u.ir),3,mean,align='right',partial=TRUE)[1:10]
rollapply(c(u.ir),3,mean,align='right',partial=TRUE, fill.na='nearest')[1:10]
rollapply(c(u.ir),3,mean,align='right',partial=TRUE, fill.na=56)[1:10]
rollapply(c(u.ir),3,mean,align='right',partial=TRUE, fill=56)[1:10]
a = c(1,2,3)
rollapply(a,3,mean)
rollapply(a,3,mean, partial=TRUE)
rollapply(a,3,mean, partial=TRUE, fill='extend')
rollapply(a,3,mean, partial=TRUE, fill.na='extend')
rollapply(a,3,mean, partial=TRUE, fill=c('entend',na))
rollapply(a,3,mean, partial=TRUE, fill=c('entend',NA))
rollapply(a,3,mean, partial=TRUE, fill=c('entend',NA,'extend'))
rollapply(a,3,mean, partial=TRUE)
rollapply(a,3,mean, partial=TRUE, na.pad=T)
rollapply(a,3,mean, partial=TRUE, na.fill()=T)
rollapply(a,3,mean, partial=TRUE, na.fill())
rollapply(a,3,mean, partial=TRUE, na.fill=100)
rollapply(a,3,mean, partial=TRUE, fill=100)
rollapply(a,3,mean, partial=TRUE, fill=c(100:102))
rollapply(a,3,mean, partial=TRUE, fill=100:102)
rollapply(a,3,mean, partial=FALSE, fill=100:102)
rollapply(a,3,mean, partial=FALSE, fill='extend')
rollapply(a,3,mean, partial=FALSE, fill=c('extend','extend'))
rollapply(a,3,mean, partial=FALSE, fill=a[1])
rollapply(a,3,mean, partial=FALSE, fill=a[1:2])
rollapply(a,3,mean, partial=FALSE, fill=a[1:3])
rollapply(a,3,mean, partial=FALSE, fill=a)
rollapply(a,3,mean, partial=FALSE, fill='extend')
rollapply(a,3,mean, partial=FALSE, fill=c('extend','extend','extend')
)
rollapply(a,3,mean, partial=FALSE, fill=c('extend',NA))
rollapply(a,3,mean, partial=FALSE, fill=c(NA, 'extend'))
rollapply(a,3,mean, partial=FALSE, fill=c('extend',NA, 'extend'))
rollapply(a,3,mean, partial=FALSE, fill=c(NA,'extend',NA))
rollapply(a,3,mean, partial=FALSE
)
a
rollapply(a,3,mean, partial=FALSE)
x
a
a = as.data.frame(x)
x
a
a
df = as.data.frame(x=1:5)
x
df
df$x
df
df <-  data.frame(x=1:5)
df
df
df$y <- sample(1:5,5)
df
df[,1]
df[1,1]
df[1,]
vbind(df[1,],df)
cbind(df[1,],df)
df[1,]
df
rbind(df,df[1,])
a
a = 1:4
rollapply(a,mean)
rollapply(a,3,mean)
rollapply(a,3,mean,partial=TRUE)
rollapply(a,3,mean,partial=TRUE)
rollapply(a,3,mean,partial=TRUE,fill=NA)
rollapply(a,3,mean,partial=TRUE,fill='nearest')
rollapply(a,3,mean,partial=TRUE,fill=1)
rollapply(a,3,mean,partial=TRUE,fill=c(1,1,1))
rollapply(a,3,mean,partial=TRUE,fill=c(1,1,1,1,1,1))
rollapply(a,3,mean,partial=FALSE,fill=NA)
rollapply(a,3,mean,partial=FALSE,fill=5)
rollapply(a,3,mean,partial=FALSE,fill='nearest')
rollapply(a,3,mean,partial=FALSE,fill=c(a[1]))
rollapply(a,3,mean,partial=FALSE,fill=c(a[1],a[4]))
rollapply(a,3,mean,partial=FALSE,fill=NA)
rollapply(a,3,mean,align='right',partial=FALSE,fill=NA)
rollapply(a,3,mean,align='left',partial=FALSE,fill=NA)
a
rollapply(a,3,mean,align='left',partial=FALSE,fill=1)
rollapply(c(a[1],a),3,mean,align='left',partial=FALSE,)
rollapply(c(a[1],a),3,mean,align='left',partial=FALSE)
rollapply(c(a[1],a),3,mean,align='right',partial=FALSE)
rollapply(c(a[1],a[1],a),3,mean,align='right',partial=FALSE)
ma <- x
ma <- function(x){
x <- c(rep(x[1],2),x)
ma <- x
}
a
ma(a)
a
b <- ma(a)
b
ma <- function(x,n){
# Get the n-period rolling average of x
# Pad the vector to get nearest values for rows that do not exist!
x <- c(rep(x[1],n-1),x)
ma <- rollapply(x, mean, align = 'right', partial = FALSE)
}
ma(u.ir)[1:5]
ma(u.ir,3)[1:5]
u.ir
ma <- function(x,n){
# Get the n-period rolling average of x
# Pad the vector to get nearest values for rows that do not exist!
x <- c(rep(x[1],n-1),x)
ma <- rollapply(x, n, mean, align = 'right', partial = FALSE)
}
ma(u.ir,3)[1:5]
df_3mo <- sapply(df[4:9], ma)
df
df <- read.csv('../files/input.csv')
op <- read.csv('../files/output.csv')
# Create function to get the n-period rolling average of x
ma <- function(x,n){
# Pad the vector to get nearest values for rows that do not exist!
x <- c(rep(x[1],n-1),x)
# Apply the rolling average
ma <- rollapply(x, n, mean, align = 'right', partial = FALSE)
}
df_3mo <- sapply(df[4:9], ma)
df_3mo <- sapply(df[4:9], ma(x,3))
df_3mo <- sapply(df[4:9],function(x) ma(x,3))
head(df_3mo)
names(op)
c('a',c('a','b','c'))
cat('a',c('a','b'))
paste('x',c('a','b','c'))
paste('x',c('a','b','c'), sep='')
nm <- names(df)
nm
sub('\\.','_',nm)
str_replace((nm,'.','_')
str_replace((nm,'\\.','_')
str_replace(nm,'\\.','_')
str_replace(nm,'.','_')
str_replace(nm,'\\.','_')
df
?filter
df_3mo <- sapply(df[4:9],function(x) ma(x,3))
df_6mo <- sapply(df[4:9],function(x) ma(x,6))
names(df_3mo) <- str_c('r3mo_',str_replace(names(df[4:9]),'\\.','_'))
df_3mo
?Filter()
Filter(a)
a
Filter(a%%2,a)
a%%2
Filter(a%%2==1,a)
tabel(df$HP.Category)
table(df$HP.Category)
unique(df$HP.Category)
for category in unique(df$HP.Category){print(category)}
for category = unique(df$HP.Category){print(category)}
for (category = unique(df$HP.Category)){print(category)}
for (category in unique(df$HP.Category)){print(category)}
df
filter(df,'100 hp')
df[df$HP.Category=='100 hp']
df[df$HP.Category=='100 hp',]
?rollapply
df1 = data.frame(x=sample(1:6,20),y=sample(letter[1:3],20))
df1 = data.frame(x=sample(1:6,20,replace = T),y=sample(letter[1:3],20,replace = T))
df1 = data.frame(x=sample(1:6,20,replace = T),y=sample(letters[1:3],20,replace = T))
df1
rollapply(df,10,cumsum)
rollapply(df1,10,cumsum)
df1
rollapply(df1$x,10,cumsum)
rollapply(df1$x,3,cumsum)
rollapply(df1$x,3,cumsum)
rollapply(df1$x,3,sum)
rollapply(df1$x,3,sum,by=df1$y)
rollapply(df1$x,3,sum,by=y)
rollapply(df1$x,3,sum,by=5)
